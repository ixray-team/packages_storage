From c24b6939dbf71e9228c0e5e1377a3c4078b89846 Mon Sep 17 00:00:00 2001
From: Mortan <cheatmaster1@mail.ru>
Date: Sat, 30 May 2020 02:48:25 +0300
Subject: [PATCH] Fixed LuaJit for Vanilla

---
 src/host/buildvm.c  |  47 ++++++++++++++++
 src/jit_allocator.h |   8 +++
 src/lib_base.c      |   6 ++
 src/lib_math.c      |   4 ++
 src/lib_string.c    |   4 ++
 src/lj_alloc.c      |  46 ++++++++-------
 src/lj_allocator.c  | 133 ++++++++++++++++++++++++++++++++++++++++++++
 src/lj_lex.c        | 107 +++++++++++++++--------------------
 src/luaconf.h       |   4 ++
 9 files changed, 277 insertions(+), 82 deletions(-)
 create mode 100644 src/jit_allocator.h
 create mode 100644 src/lj_allocator.c

diff --git a/src/host/buildvm.c b/src/host/buildvm.c
index de23fabd..cdb70d43 100644
--- a/src/host/buildvm.c
+++ b/src/host/buildvm.c
@@ -241,6 +241,48 @@ static int build_code(BuildCtx *ctx)
   return 0;
 }
 
+static int clean_ctx(BuildCtx *ctx)
+{
+    if(ctx->glob)
+        free(ctx->glob);
+
+    if(ctx->bc_ofs)
+        free(ctx->bc_ofs);
+
+    if(ctx->code)
+        free(ctx->code);
+
+    ptrdiff_t i = ctx->nsym;
+
+    if(ctx->sym[0].name)
+        free(ctx->sym[0].name);
+
+    while (i > 0) {
+        if(ctx->sym[i].name)
+            free(ctx->sym[i].name);
+        i--;
+    }
+
+    int j;
+
+    for (j = 0; j < (int)NRELOCSYM; j++)
+    {
+        if(relocmap[j] >= 0)
+        {
+            if(ctx->relocsym[relocmap[j]])
+                free(ctx->relocsym[relocmap[j]]);
+        }
+    }
+
+    if(ctx->relocsym)
+        free(ctx->relocsym);
+
+    if(ctx->sym)
+        free(ctx->sym);
+
+    if(ctx->beginsym)
+        free(ctx->beginsym);
+}
 /* -- Generate VM enums --------------------------------------------------- */
 
 const char *const bc_names[] = {
@@ -438,6 +480,7 @@ int main(int argc, char **argv)
   if (sizeof(void *) != 4*LJ_32+8*LJ_64) {
     fprintf(stderr,"Error: pointer size mismatch in cross-build.\n");
     fprintf(stderr,"Try: make HOST_CC=\"gcc -m32\" CROSS=...\n\n");
+    clean_ctx(ctx);
     return 1;
   }
 
@@ -446,6 +489,7 @@ int main(int argc, char **argv)
 
   if ((status = build_code(ctx))) {
     fprintf(stderr,"Error: DASM error %08x\n", status);
+    clean_ctx(ctx);
     return 1;
   }
 
@@ -468,6 +512,7 @@ int main(int argc, char **argv)
   } else if (!(ctx->fp = fopen(ctx->outname, binmode ? "wb" : "w"))) {
     fprintf(stderr, "Error: cannot open output file '%s': %s\n",
 	    ctx->outname, strerror(errno));
+    clean_ctx(ctx);
     exit(1);
   }
 
@@ -509,9 +554,11 @@ int main(int argc, char **argv)
   if (ferror(ctx->fp)) {
     fprintf(stderr, "Error: cannot write to output file: %s\n",
 	    strerror(errno));
+    clean_ctx(ctx);
     exit(1);
   }
   fclose(ctx->fp);
+  clean_ctx(ctx);
 
   return 0;
 }
diff --git a/src/jit_allocator.h b/src/jit_allocator.h
new file mode 100644
index 00000000..aacc27ce
--- /dev/null
+++ b/src/jit_allocator.h
@@ -0,0 +1,8 @@
+#ifndef JIT_ALLOCATOR_H
+#define JIT_ALLOCATOR_H
+
+void jit_allocator_init();
+void* jit_mmap(size_t size);
+void jit_destroy(void* p, size_t size);
+
+#endif
\ No newline at end of file
diff --git a/src/lib_base.c b/src/lib_base.c
index 1cd83058..9b2187dc 100644
--- a/src/lib_base.c
+++ b/src/lib_base.c
@@ -589,6 +589,12 @@ LJLIB_ASM(coroutine_yield)
   return FFH_UNREACHABLE;
 }
 
+LJLIB_CF(coroutine_cstacksize)
+{
+  lua_pushinteger(L, luaL_optint(L, 1, -1)); // literally do nothing
+  return 1;
+}
+
 static int ffh_resume(lua_State *L, lua_State *co, int wrap)
 {
   if (co->cframe != NULL || co->status > LUA_YIELD ||
diff --git a/src/lib_math.c b/src/lib_math.c
index ef9dda2d..7bb03880 100644
--- a/src/lib_math.c
+++ b/src/lib_math.c
@@ -221,6 +221,10 @@ LUALIB_API int luaopen_math(lua_State *L)
   rs = (RandomState *)lua_newuserdata(L, sizeof(RandomState));
   rs->valid = 0;  /* Use lazy initialization to save some time on startup. */
   LJ_LIB_REG(L, LUA_MATHLIBNAME, math);
+#if defined(LUA_COMPAT_MOD) && !LJ_52
+  lua_getfield(L, -1, "fmod");
+  lua_setfield(L, -2, "mod");
+#endif
   return 1;
 }
 
diff --git a/src/lib_string.c b/src/lib_string.c
index 76b0730a..c7f37bc7 100644
--- a/src/lib_string.c
+++ b/src/lib_string.c
@@ -737,6 +737,10 @@ LUALIB_API int luaopen_string(lua_State *L)
   GCtab *mt;
   global_State *g;
   LJ_LIB_REG(L, LUA_STRLIBNAME, string);
+#if defined(LUA_COMPAT_GFIND) && !LJ_52
+  lua_getfield(L, -1, "gmatch");
+  lua_setfield(L, -2, "gfind");
+#endif
   mt = lj_tab_new(L, 0, 1);
   /* NOBARRIER: basemt is a GC root. */
   g = G(L);
diff --git a/src/lj_alloc.c b/src/lj_alloc.c
index 33a2eb8f..d2e81a2b 100644
--- a/src/lj_alloc.c
+++ b/src/lj_alloc.c
@@ -31,7 +31,7 @@
 #include "lj_def.h"
 #include "lj_arch.h"
 #include "lj_alloc.h"
-
+#include "jit_allocator.h"
 #ifndef LUAJIT_USE_SYSMALLOC
 
 #define MAX_SIZE_T		(~(size_t)0)
@@ -125,7 +125,7 @@
 /* Undocumented, but hey, that's what we all love so much about Windows. */
 typedef long (*PNTAVM)(HANDLE handle, void **addr, ULONG zbits,
 		       size_t *size, ULONG alloctype, ULONG prot);
-static PNTAVM ntavm;
+ PNTAVM ntavm;
 
 /* Number of top bits of the lower 32 bits of an address that must be zero.
 ** Apparently 0 gives us full 64 bit addresses and 1 gives us the lower 2GB.
@@ -136,35 +136,40 @@ static void init_mmap(void)
 {
   ntavm = (PNTAVM)GetProcAddress(GetModuleHandleA("ntdll.dll"),
 				 "NtAllocateVirtualMemory");
+  jit_allocator_init();
 }
 #define INIT_MMAP()	init_mmap()
 
 /* Win64 32 bit MMAP via NtAllocateVirtualMemory. */
-static void *CALL_MMAP(size_t size)
+static LJ_AINLINE void *CALL_MMAP(size_t size)
 {
   DWORD olderr = GetLastError();
-  void *ptr = NULL;
-  long st = ntavm(INVALID_HANDLE_VALUE, &ptr, NTAVM_ZEROBITS, &size,
-		  MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);
+  void* ptr = jit_mmap(size);
   SetLastError(olderr);
-  return st == 0 ? ptr : MFAIL;
+  return ptr;
 }
 
 /* For direct MMAP, use MEM_TOP_DOWN to minimize interference */
-static void *DIRECT_MMAP(size_t size)
+static LJ_AINLINE void *direct_mmap(size_t size)
 {
   DWORD olderr = GetLastError();
-  void *ptr = NULL;
-  long st = ntavm(INVALID_HANDLE_VALUE, &ptr, NTAVM_ZEROBITS, &size,
-		  MEM_RESERVE|MEM_COMMIT|MEM_TOP_DOWN, PAGE_READWRITE);
+  void* ptr = jit_mmap(size);
   SetLastError(olderr);
-  return st == 0 ? ptr : MFAIL;
+  return ptr;
 }
 
+/* This function supports releasing coalesed segments */
+static LJ_AINLINE int CALL_MUNMAP(void *ptr, size_t size)
+{
+  DWORD olderr = GetLastError();
+  jit_destroy(ptr, size);  
+  SetLastError(olderr);
+  return 0;  
+}
 #else
 
 /* Win32 MMAP via VirtualAlloc */
-static void *CALL_MMAP(size_t size)
+static LJ_AINLINE void *CALL_MMAP(size_t size)
 {
   DWORD olderr = GetLastError();
   void *ptr = LJ_WIN_VALLOC(0, size, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);
@@ -173,7 +178,7 @@ static void *CALL_MMAP(size_t size)
 }
 
 /* For direct MMAP, use MEM_TOP_DOWN to minimize interference */
-static void *DIRECT_MMAP(size_t size)
+static LJ_AINLINE void *direct_mmap(size_t size)
 {
   DWORD olderr = GetLastError();
   void *ptr = LJ_WIN_VALLOC(0, size, MEM_RESERVE|MEM_COMMIT|MEM_TOP_DOWN,
@@ -181,11 +186,7 @@ static void *DIRECT_MMAP(size_t size)
   SetLastError(olderr);
   return ptr ? ptr : MFAIL;
 }
-
-#endif
-
-/* This function supports releasing coalesed segments */
-static int CALL_MUNMAP(void *ptr, size_t size)
+static LJ_AINLINE int CALL_MUNMAP(void *ptr, size_t size)
 {
   DWORD olderr = GetLastError();
   MEMORY_BASIC_INFORMATION minfo;
@@ -205,6 +206,13 @@ static int CALL_MUNMAP(void *ptr, size_t size)
   return 0;
 }
 
+#endif
+
+#define DIRECT_MMAP(size)	direct_mmap(size)
+
+/* This function supports releasing coalesed segments */
+
+
 #elif LJ_ALLOC_MMAP
 
 #define MMAP_PROT		(PROT_READ|PROT_WRITE)
diff --git a/src/lj_allocator.c b/src/lj_allocator.c
new file mode 100644
index 00000000..781ed584
--- /dev/null
+++ b/src/lj_allocator.c
@@ -0,0 +1,133 @@
+
+#include "lj_def.h"
+#include "lj_arch.h"
+#if LJ_64 && !LJ_GC64
+#ifdef _WIN32
+#define WIN32_LEAN_AND_MEAN
+#include <windows.h>
+#endif
+#include "jit_allocator.h"
+typedef long (*PNTAVM)(HANDLE handle, void **addr, ULONG zbits,
+		       size_t *size, ULONG alloctype, ULONG prot);
+extern PNTAVM ntavm;
+
+#define NTAVM_ZEROBITS		1
+
+#define MAX_SIZE_T		(~(size_t)0)
+#define MFAIL			((void *)(MAX_SIZE_T))
+
+#define CHUNK_SIZE (128 * 1024)
+#define CHUNK_COUNT 1024
+
+static int inited = 0;
+static void* g_heap;
+static char g_heapMap[CHUNK_COUNT + 1];
+static char* g_firstFreeChunk;
+static char* find_free(int size);
+
+//#define DEBUG_MEM
+#ifdef DEBUG_MEM
+static char buf[100];
+static void dump_map(void* ptr, size_t size, char c);
+#endif
+
+void jit_allocator_init()
+{
+	if (inited)
+		return;
+	g_heap = NULL;
+	size_t size = CHUNK_SIZE * CHUNK_COUNT;
+	long st = ntavm(INVALID_HANDLE_VALUE, &g_heap, NTAVM_ZEROBITS, &size,
+	                MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);
+
+	for (int i = 0; i < CHUNK_COUNT; i++)
+		g_heapMap[i] = 'x';
+	g_heapMap[CHUNK_COUNT] = '\0';
+	g_firstFreeChunk = g_heapMap;
+
+#ifdef DEBUG_MEM	
+	sprintf(buf, "XR_INIT create_block %p result=%X\r\n", g_heap, st);
+	OutputDebugString(buf);
+#endif
+	inited = 1;
+}
+
+void* jit_mmap(size_t size)
+{
+#ifdef DEBUG_MEM
+	sprintf(buf, "jit_mmap(%Iu)", size);
+	OutputDebugString(buf);
+#endif
+	int chunks = size / CHUNK_SIZE;
+	char* s = find_free(chunks);
+	void* ptr = MFAIL;
+	if (s != NULL) {
+		ptr = (char*)g_heap + CHUNK_SIZE * (s - g_heapMap);
+		for (int i = 0; i < chunks; i++)
+			s[i] = 'a' + chunks - 1;
+		if (s == g_firstFreeChunk)
+			g_firstFreeChunk = find_free(1);
+	}
+#ifdef DEBUG_MEM
+	sprintf(buf, " ptr=%p chunks %d\r\n", ptr, chunks);
+	OutputDebugString(buf);
+	dump_map(ptr, size, 'U');
+#endif
+	return ptr;
+}
+
+void jit_destroy(void* ptr, size_t size)
+{
+#ifdef DEBUG_MEM
+	sprintf(buf, "jit_destroy(ptr=%p, size=%Iu)", ptr, size);
+	OutputDebugString(buf);
+#endif
+	char* s = g_heapMap + ((char*)ptr - (char*)g_heap) / CHUNK_SIZE;
+	int count = size / CHUNK_SIZE;
+	for (int i = 0; i < count; i++)
+		s[i] = 'x';
+	if (s < g_firstFreeChunk)
+		g_firstFreeChunk = s;
+#ifdef DEBUG_MEM	
+	dump_map(ptr, size, 'X');
+#endif
+}
+
+char* find_free(int size)
+{
+	char* p = g_firstFreeChunk;
+	int count = 0;
+	while (*p != '\0') {
+		if (*p == 'x')
+			count++;
+		else
+			count = 0;
+		p++;
+		if (count == size)
+			return p - count;
+	}
+	return NULL;
+}
+
+static 	char temp[1025];
+void dump_map(void* ptr, size_t size, char c)
+{
+#ifdef DEBUG_MEM
+	OutputDebugString("heap:\r\n|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------\r\n");
+	strcpy(temp, g_heapMap);
+	char *cur = temp + ((char*)ptr - (char*)g_heap) / CHUNK_SIZE;
+	for (int i = 0; i < size / CHUNK_SIZE; i++)
+		cur[i] = c;
+	
+	for (int i = 0; i < 8; i++)
+	{
+		char a = temp[i * 128 + 128];
+		temp[i * 128 + 128] = '\0';
+		OutputDebugString(temp + i * 128);
+		temp[i * 128 + 128] = a;
+		OutputDebugString("\r\n");
+	}
+	OutputDebugString("--------------------------------------------------------------------------------------------------------------------------------\r\n");
+#endif
+}
+#endif
\ No newline at end of file
diff --git a/src/lj_lex.c b/src/lj_lex.c
index 2d2f8194..c6111b18 100644
--- a/src/lj_lex.c
+++ b/src/lj_lex.c
@@ -202,75 +202,35 @@ static void lex_string(LexState *ls, TValue *tv)
       case 'r': c = '\r'; break;
       case 't': c = '\t'; break;
       case 'v': c = '\v'; break;
-      case 'x':  /* Hexadecimal escape '\xXX'. */
-	c = (lex_next(ls) & 15u) << 4;
-	if (!lj_char_isdigit(ls->c)) {
-	  if (!lj_char_isxdigit(ls->c)) goto err_xesc;
-	  c += 9 << 4;
-	}
-	c += (lex_next(ls) & 15u);
-	if (!lj_char_isdigit(ls->c)) {
-	  if (!lj_char_isxdigit(ls->c)) goto err_xesc;
-	  c += 9;
-	}
-	break;
-      case 'u':  /* Unicode escape '\u{XX...}'. */
-	if (lex_next(ls) != '{') goto err_xesc;
-	lex_next(ls);
-	c = 0;
-	do {
-	  c = (c << 4) | (ls->c & 15u);
-	  if (!lj_char_isdigit(ls->c)) {
-	    if (!lj_char_isxdigit(ls->c)) goto err_xesc;
-	    c += 9;
-	  }
-	  if (c >= 0x110000) goto err_xesc;  /* Out of Unicode range. */
-	} while (lex_next(ls) != '}');
-	if (c < 0x800) {
-	  if (c < 0x80) break;
-	  lex_save(ls, 0xc0 | (c >> 6));
-	} else {
-	  if (c >= 0x10000) {
-	    lex_save(ls, 0xf0 | (c >> 18));
-	    lex_save(ls, 0x80 | ((c >> 12) & 0x3f));
-	  } else {
-	    if (c >= 0xd800 && c < 0xe000) goto err_xesc;  /* No surrogates. */
-	    lex_save(ls, 0xe0 | (c >> 12));
-	  }
-	  lex_save(ls, 0x80 | ((c >> 6) & 0x3f));
-	}
-	c = 0x80 | (c & 0x3f);
-	break;
-      case 'z':  /* Skip whitespace. */
-	lex_next(ls);
-	while (lj_char_isspace(ls->c))
-	  if (lex_iseol(ls)) lex_newline(ls); else lex_next(ls);
-	continue;
+
+     
+   
+    
       case '\n': case '\r': lex_save(ls, '\n'); lex_newline(ls); continue;
       case '\\': case '\"': case '\'': break;
       case LEX_EOF: continue;
-      default:
-	if (!lj_char_isdigit(c))
-	  goto err_xesc;
-	c -= '0';  /* Decimal escape '\ddd'. */
-	if (lj_char_isdigit(lex_next(ls))) {
-	  c = c*10 + (ls->c - '0');
-	  if (lj_char_isdigit(lex_next(ls))) {
-	    c = c*10 + (ls->c - '0');
-	    if (c > 255) {
-	    err_xesc:
-	      lj_lex_error(ls, TK_string, LJ_ERR_XESC);
-	    }
-	    lex_next(ls);
-	  }
-	}
-	lex_save(ls, c);
-	continue;
-      }
+            default: {
+            if (!lj_char_isdigit(ls->c))
+              lex_savenext(ls);  /* handles \\, \", \', and \? */
+            else {  /* \xxx */
+              int i = 0;
+              c = 0;
+              do {
+                c = 10*c + (ls->c-'0');
+                lex_next(ls);
+              } while (++i<3 && lj_char_isdigit(ls->c));
+              if (c > UCHAR_MAX)
+                lj_lex_error(ls, "escape sequence too large", LJ_ERR_XSTR);
+              lex_save(ls, c);
+            }
+            continue;
+          }
+        }
+
       lex_save(ls, c);
       lex_next(ls);
       continue;
-      }
+	}
     default:
       lex_savenext(ls);
       break;
@@ -332,6 +292,27 @@ static LexToken lex_scan(LexState *ls, TValue *tv)
       while (!lex_iseol(ls) && ls->c != LEX_EOF)
 	lex_next(ls);
       continue;
+    case '/': /* C-style comments */
+      lex_next(ls);
+      if (ls->c == '/') { /* Short comment "//.*\n". */
+        while (!lex_iseol(ls) && ls->c != LEX_EOF)
+          lex_next(ls);
+        continue;
+      } else if (ls->c == '*') { /* Long comment /* =*[...]=* */
+        lex_next(ls);
+        while (ls->c != LEX_EOF) {
+          if (ls->c == '*') {
+            lex_next(ls);
+            if (ls->c == '/') {
+              lex_next(ls);
+              break;
+            }
+          }
+          lex_next(ls);
+        }
+        continue;
+      }
+      return '/';
     case '[': {
       int sep = lex_skipeq(ls);
       if (sep >= 0) {
diff --git a/src/luaconf.h b/src/luaconf.h
index c2d29d94..b834c566 100644
--- a/src/luaconf.h
+++ b/src/luaconf.h
@@ -92,6 +92,10 @@
 #define LUAI_GCMUL	200	/* Run GC at 200% of allocation speed. */
 #define LUA_MAXCAPTURES	32	/* Max. pattern captures. */
 
+/* Compatibility with older library function names. */
+#define LUA_COMPAT_MOD		/* OLD: math.mod, NEW: math.fmod */
+#define LUA_COMPAT_GFIND	/* OLD: string.gfind, NEW: string.gmatch */
+
 /* Configuration for the frontend (the luajit executable). */
 #if defined(luajit_c)
 #define LUA_PROGNAME	"luajit"  /* Fallback frontend name. */
-- 
2.44.0.windows.1

